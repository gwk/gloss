{
  "scopeName": "source.swift",
  "fileTypes": ["swift"],
  "name": "Swift-Gloss",
  "firstLineMatch": "^#!\\s*/.*\\bswift",

  "patterns": [
    { "name": "keyword.declaration.swift",
      "match": "\\b(class|deinit|enum|extension|import|init|inout|internal|let|operator|private|protocol|public|static|struct|subscript|typealias|var)\\b"
    },
    { "name": "keyword.declaration.operator.swift",
      "match": "\\b((infix|postfix|prefix)\\s+operator)\\b"
    },
    { "name": "keyword.declaration.associativity.swift",
      "match": "\\b(associativity\\s+(left|none|right))\\b"
    },
    { "name": "keyword.declaration.precedence.swift",
      "match": "\\b(precedence\\s+\\d+(\\s+assignment)?)\\b"
    },
    { "name": "keyword.control.swift",
      "match": "\\b(break|case|catch|continue|default|defer|do|else|fallthrough|for|guard|if|in|repeat|return|switch|throw|try|where|while)\\b"
    },
    { "name": "keyword.other.swift",
      "match": "\\b(as|dynamicType|is|rethrows|throws)\\b"
    },
    { "name": "constant.language.swift",
      "match": "\\b(false|nil|true)\\b"
    },
    { "name": "keyword.patterns.swift",
      "match": "\\b(_)\\b"
    },
    { "name": "keyword.reserved.swift",
      "match": "\\b(convenience|dynamic|didSet|final|get|mutating|nonmutating|optional|override|Protocol|required|unowned|weak|willSet)\\b"
    },
    { "name": "variable.language.swift",
      "match": "\\b(super|self|Self)\\b"
    },
    { "name": "variable.language.magic.swift",
      "match": "\\b(__COLUMN__|__FILE__|__FUNCTION__|__LINE__)\\b"
    },
    { "include": "#comment" },
    { "include": "#literal" },
    { "include": "#function" },
    { "include": "#operator" },
    { "include": "#attribute" }
  ],

  "repository": {
    "comment": {
      "patterns": [
        {
          "name": "comment.block.swift",
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.swift"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.swift"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            }
          ]
        },
        {
          "begin": "(^[ \\t]+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.swift"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "name": "comment.line.double-slash.swift",
              "begin": "//",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.swift"
                }
              },
              "end": "\\n",
              "patterns": [
                {
                  "name": "punctuation.separator.continuation.swift",
                  "match": "(?>\\\\\\s*\\n)"
                }
              ]
            }
          ]
        }
      ]
    },
    "escaped-char": {
      "patterns": [
        {
          "name": "constant.character.escape.swift",
          "match": "\\\\[0\\\\tnr\"']"
        },
        {
          "name": "constant.character.escape.swift",
          "match": "\\\\(x\\h{2}|u\\h{4}|U\\h{8})"
        },
        {
          "name": "invalid.illegal.constant.character.escape.swift",
          "match": "\\\\[^uxU]"
        }
      ]
    },
    "identifier": {
      "match": "(?x) [_a-zA-Z][_a-zA-Z0-9]* | `[_a-zA-Z][_a-zA-Z0-9]*` | $[0-9]+",
      "captures": {
        "5": {
          "name": "variable.other.positional.swift"
        }
      }
    },
    "literal": {
      "patterns": [
        {
          "include": "#literal-number"
        },
        {
          "include": "#literal-string"
        },
        {
          "include": "#literal-boolean"
        }
      ]
    },
    "literal-number": {
      "name": "constant.numeric.swift",
      "match": "(?x) \\b (?: [0-9][0-9_]*(?:\\.[0-9][0-9_]*)?(?:e[+-]?[0-9][0-9_]*)? | 0x[0-9a-fA-F][0-9a-fA-F_]*(?:\\.[0-9a-fA-F][0-9a-fA-F_]*)?(?:p[+-]?[0-9][0-9_]*)? | 0o[0-7][0-7_]* | 0b[01][01_]* ) \\b"
    },
    "literal-string": {
      "name": "string.quoted.double.swift",
      "begin": "\"",
      "end": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.swift"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.swift"
        }
      },
      "patterns": [
        {
          "include": "#quoted-text"
        }
      ]
    },
    "literal-boolean": {
      "match": "\\b(true|false)\\b",
      "name": "constant.language.boolean.swift"
    },
    "operator": {
      "patterns": [
        {
          "include": "#operator-character"
        }
      ]
    },
    "operator-character": {
      "name": "keyword.operator.swift",
      "match": "[\\/=\\-+!*%<>&|^~.]"
    },
    "quoted-text": {
      "patterns": [
        {
          "name": "meta.embedded.line.swift",
          "contentName": "source.swift",
          "begin": "\\\\\\(",
          "end": "\\)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.embedded.begin.swift"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.embedded.end.swift"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "include": "#escaped-char"
        }
      ]
    },
    "function": {
      "name": "meta.function.swift",
      "begin": "(func) \\s*",
      "end": "(?=\\{|#)|;|$",
      "beginCaptures": {
        "1": {
          "name": "storage.type.function.swift"
        }
      },
      "comment": "match regular function like: func myFunc(...)",
      "patterns": [
        {
          "begin": "([a-zA-Z_0-9]+)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.swift"
            },
            "2": {
              "name": "punctuation.definition.parameters.begin.swift"
            }
          },
          "comment": "match regular function like: func myFunc(...)",
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.parameters.end.swift"
            }
          }
        },
        {
          "name": "meta.return-type.swift",
          "match": "((->)\\s*([^\\{]+))",
          "captures": {
            "2": {
              "name": "punctuation.function.swift"
            },
            "3": {
              "name": "entity.name.type.class.swift"
            }
          }
        }
      ]
    },
    "whitespace": {
      "match": "(?x) [ \\u0020 (?#           space) \\u000A (?#       line-feed) \\u000D (?# carriage-return) \\u0009 (?#  horizontal-tab) \\u000B (?#    vertical-tab) \\u000C (?#       form-feed) \\u0000 (?#            null) ]"
    },
    "attribute": {
      "name": "storage.type.attribute.swift",
      "begin": "@",
      "end": " "
    }
  }
}